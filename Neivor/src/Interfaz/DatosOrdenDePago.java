/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaz;

import Atxy2k.CustomTextField.RestrictedTextField;
import static java.awt.SystemColor.text;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.format.TextStyle;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.font.PDMMType1Font;
import org.apache.pdfbox.pdmodel.font.PDType1CFont;
import org.apache.pdfbox.pdmodel.font.PDType1Font;

/**
 * Payment Order Generation Module This module has as its main function 
 * the generation of a payment order.
 *
 * @since 1.0.0
 * @author David Rivas
 */

public class DatosOrdenDePago extends javax.swing.JFrame {

    /**
     *The URL of the server you want to access is saved
     */
    public static final String URL = "jdbc:mysql://localhost:3306/troxxy";

    /**
     *The username is saved in the database
     */
    public static final String SQL_USERNAME = "root";

    /**
     *The database password is saved
     */
    public static final String SQL_PASSWORD = "";
    
    /**
     * Variables are prepared to reduce the code to write
     */
    PreparedStatement PS = null;
    ResultSet RS = null;

    /**
     *Methods and variables necessary for the operation of the code were placed
     */
    public DatosOrdenDePago() {

        initComponents();
        txtServ.addItem("Seleccione Servicio a pagar");
        txtForm.addItem("Seleccione Tipo de pago a efectuar");

        ComboBox2();
        numCuotas.setVisible(false);
        txtCuotas.setVisible(false);

        LimpiarCajas();
        Deshabilitar();
        ValidacionDeCampos();
        this.setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtNom = new javax.swing.JTextField();
        txtDoc = new javax.swing.JTextField();
        txtNum = new javax.swing.JTextField();
        txtVal = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtForm = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        txtServ = new javax.swing.JComboBox<>();
        numCuotas = new javax.swing.JLabel();
        txtCuotas = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabelFont = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setForeground(new java.awt.Color(204, 204, 255));

        txtNom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomActionPerformed(evt);
            }
        });

        txtDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDocActionPerformed(evt);
            }
        });

        txtNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumActionPerformed(evt);
            }
        });

        txtVal.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtVal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtValActionPerformed(evt);
            }
        });

        jLabel4.setText("Valor a pagar:");

        jLabel3.setText("NÃºmero casa/departamento:");

        jLabel2.setText("Documento del pagador:");

        jLabel1.setText("Nombre del pagador:");

        jLabel6.setText("Forma de pago:");

        txtForm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtFormMouseClicked(evt);
            }
        });
        txtForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFormActionPerformed(evt);
            }
        });

        jLabel7.setText("Servicio: ");

        numCuotas.setText("Numero de cuotas");

        txtCuotas.setText("1");
        txtCuotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCuotasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNum, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDoc, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(numCuotas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtVal, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                            .addComponent(txtForm, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtServ, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtCuotas, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(51, 51, 51)))))
                .addGap(41, 41, 41))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtServ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtForm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numCuotas, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCuotas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 50, 510, 320));

        jButton1.setBackground(new java.awt.Color(204, 204, 255));
        jButton1.setText("Exit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 10, -1, -1));

        jButton2.setBackground(new java.awt.Color(204, 204, 255));
        jButton2.setText("Generar Orden De Pago");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 390, -1, -1));

        jLabelFont.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/gray.jpg"))); // NOI18N
        getContentPane().add(jLabelFont, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 610, 430));

        jLabel5.setText("jLabel5");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 90, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.exit(0);// Button to close the tab
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtNomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomActionPerformed

    private void txtDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDocActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDocActionPerformed

    private void txtNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumActionPerformed

    private void txtValActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtValActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtValActionPerformed

    /**
     *Metodo orientado a validar y restringir los campos de entrada
     */
    public void ValidacionDeCampos() {
        /*Text field validation for Payer Name*/
        RestrictedTextField a = new RestrictedTextField(txtNom);
        a.setLimit(40);

        /*Text field validation for Payer's Document*/
        RestrictedTextField b = new RestrictedTextField(txtDoc);
        b.setLimit(8);
        b.setOnlyNums(true);

        /*Validation of the text field for the payer's house number*/
        RestrictedTextField c = new RestrictedTextField(txtNum);
        c.setLimit(10);

        /*Validation of the text field for the Amount to pay of the payer*/
        RestrictedTextField d = new RestrictedTextField(txtVal);
        d.setLimit(9);
        d.setOnlyNums(true);

        /*Validation of text field for the number of payments of the payer*/
        RestrictedTextField e = new RestrictedTextField(txtCuotas);
        e.setLimit(2);

    }

    private void ComboBox2() {
        Connection con = null;
        try {
            
            /**
             * The connection to the database is made. After that, the search
             * for the types of payment is carried out to culminate with the
             * filling of the ComboBox with the Description column
             */
            
            con = getConection();
            PS = con.prepareStatement("SELECT * FROM tipopago ORDER BY id ASC");
            RS = PS.executeQuery();

            while (RS.next()) {
                txtForm.addItem(RS.getString("Descripcion"));
                
            }
            RS.close();

        } catch (SQLException e) {
            System.out.println("Error al visualizar los datos " + e.getMessage());
        } finally {
            PS = null;
            RS = null;
        }

        try {
            
            /**
             * The connection to the database is made. After that, the search
             * for services is carried out to culminate with the filling of 
             * the ComboBox with the Description column
             */
            
            con = getConection();
            PS = con.prepareStatement("SELECT * FROM servicio ORDER BY CodServicio ASC");
            RS = PS.executeQuery();

            while (RS.next()) {
                txtServ.addItem(RS.getString("Descripcion"));
            }
            RS.close();

        } catch (SQLException e) {
            System.out.println("Error al visualizar los datos " + e.getMessage());
        } finally {
            PS = null;
            RS = null;

        }
    }

    /**
     *Prepared method for clearing input fields
     */
    
    private void LimpiarCajas() {
        txtDoc.setText(null);
        txtNom.setText(null);
        txtNum.setText(null);
        txtVal.setText(null);
        txtServ.setSelectedIndex(0);
        txtForm.setSelectedIndex(0);
        txtCuotas.setText("1");
        txtCuotas.setVisible(false);
        numCuotas.setVisible(false);

    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Connection con = null;
        
        /**
         * The connection to the database is made. After that, the inclusion
         * of data in variables is made to complete the filling of the necessary
         * fields to generate a PDF simulating a payment order
         */
        
        if (txtDoc.getText().isEmpty() || txtNom.getText().isEmpty() || txtNum.getText().isEmpty() || txtVal.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios");
        } else {
            String Formu = (String) txtForm.getSelectedItem();
            String opcion = (String) txtForm.getSelectedItem();
            LocalTime Codigo = LocalTime.now();
            String CodigoBus = "CL" + Codigo;
            System.out.println("" + Formu);
            int r = this.txtServ.getSelectedIndex();
            int Servi = r;
            String Valores = txtVal.getText();
            float Valor = Float.parseFloat(Valores);
            /*Inicio de generacion del PDF*/
            try {
                PDDocument documento = new PDDocument();
                PDPage pagina = new PDPage(PDRectangle.A4);
                documento.addPage(pagina);
                PDPageContentStream contenido = new PDPageContentStream(documento, pagina);

                String Nom = txtNom.getText();
                String Doc = txtDoc.getText();
                String Num = txtNum.getText();
                String Val = txtVal.getText();

                LocalDate Fecha;
                Fecha = LocalDate.now();
                String sCadena1 = Nom;
                String sSubCadena1 = sCadena1.substring(0, 3);
                String sCadena2 = Doc;
                String sSubCadena2 = sCadena2.substring(0, 7);

                contenido.beginText();
                contenido.setFont(PDType1Font.TIMES_BOLD, 8);
                contenido.newLineAtOffset(20, pagina.getMediaBox().getHeight() - 35);
                contenido.showText("" + Fecha);
                contenido.endText();

                contenido.beginText();
                contenido.setFont(PDType1Font.TIMES_BOLD, 12);
                contenido.newLineAtOffset(20, pagina.getMediaBox().getHeight() - 50);
                contenido.showText("Referencia: " + CodigoBus);
                contenido.endText();

                contenido.beginText();
                contenido.setFont(PDType1Font.TIMES_BOLD, 14);
                contenido.newLineAtOffset(460, pagina.getMediaBox().getHeight() - 50);
                contenido.showText("**Neivor**");
                contenido.endText();

                contenido.beginText();
                contenido.setFont(PDType1Font.TIMES_BOLD, 14);
                contenido.newLineAtOffset(460, pagina.getMediaBox().getHeight() - 35);
                contenido.showText("**" + Val + "**");
                contenido.endText();

                contenido.beginText();
                contenido.setFont(PDType1Font.TIMES_BOLD, 18);
                contenido.newLineAtOffset(220, pagina.getMediaBox().getHeight() - 80);
                contenido.showText("ORDEN DE PAGO");
                contenido.endText();

                contenido.beginText();
                contenido.setFont(PDType1Font.TIMES_BOLD, 10);
                contenido.newLineAtOffset(20, pagina.getMediaBox().getHeight() - 120);
                contenido.showText("Fecha de emision: " + Fecha);
                contenido.endText();

                contenido.beginText();
                contenido.setFont(PDType1Font.TIMES_BOLD, 10);
                contenido.newLineAtOffset(20, pagina.getMediaBox().getHeight() - 130);
                contenido.showText("Nombre de Cliente: " + Nom);
                contenido.endText();

                contenido.beginText();
                contenido.setFont(PDType1Font.TIMES_BOLD, 10);
                contenido.newLineAtOffset(20, pagina.getMediaBox().getHeight() - 140);
                contenido.showText("Num. Documento: " + Doc);
                contenido.endText();

                contenido.beginText();
                contenido.setFont(PDType1Font.TIMES_BOLD, 10);
                contenido.newLineAtOffset(20, pagina.getMediaBox().getHeight() - 150);
                contenido.showText("Numero de casa/departamento: " + Num);
                contenido.endText();

                contenido.beginText();
                contenido.setFont(PDType1Font.TIMES_BOLD, 10);
                contenido.newLineAtOffset(20, pagina.getMediaBox().getHeight() - 160);
                contenido.showText("Valor a pagar: " + Val);
                contenido.endText();

                contenido.beginText();
                contenido.setFont(PDType1Font.TIMES_BOLD, 12);
                contenido.newLineAtOffset(460, pagina.getMediaBox().getHeight() - 120);
                contenido.showText("ORDEN DE PAGO: ");
                contenido.endText();

                contenido.beginText();
                contenido.setFont(PDType1Font.TIMES_BOLD, 12);
                contenido.newLineAtOffset(460, pagina.getMediaBox().getHeight() - 130);
                contenido.showText("123456789");
                contenido.endText();

                contenido.beginText();
                contenido.setFont(PDType1Font.TIMES_BOLD, 11);
                contenido.newLineAtOffset(460, pagina.getMediaBox().getHeight() - 130);
                contenido.showText("");
                contenido.endText();

                contenido.close();
                documento.save("C:\\Users\\DEL OPTIPLEX 790\\Desktop\\OrdenDePago" + "" + ".pdf");

                JOptionPane.showMessageDialog(this, "Documento Guardado Exitosamente bajo el CÃ²digo: " + CodigoBus);
                /*End of PDF generation*/
            } catch (Exception e) {
                System.out.println("Error: " + e.getMessage().toString());
            }
            
            try {
                
                /**
                *The connection to the database is made. After that, a query of
                *the Insert type is made to save the data of the payment order
                */
                
                con = getConection();

                PS = con.prepareStatement("INSERT INTO ordenpago (CodigoBusqueda, NomCliente, Documento, Numcasa, Valor, Servicio, CodServicio, Formapago, NumCuotas, Status, ImpAde, ImpMin) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)");
                PS.setString(1, CodigoBus);
                PS.setString(2, txtNom.getText());
                PS.setString(3, txtDoc.getText());
                PS.setString(4, txtNum.getText());
                PS.setFloat(5, Valor);
                PS.setString(6, txtServ.getSelectedItem().toString());
                PS.setInt(7, Servi);
                PS.setString(8, txtForm.getSelectedItem().toString());
                PS.setString(9, txtCuotas.getText());
                PS.setString(10, "Pendiente");
                if (opcion.equals("Pago Unico")) {
                    PS.setFloat(11, Valor);
                }
                if (opcion.equals("Pago a Cuotas")) {
                    PS.setString(11, "0.00");
                }   
                PS.setString(12, "0.00");

                int RS = PS.executeUpdate();

                con.close();
            } catch (SQLException e) {
                System.out.println("Error al visualizar los datos: " + e.getMessage());
            }
            
            /**
             * Different consultations were conditioned according to the type of
             * payment generated. If the payment is "Single Payment", a single 
             * debt will be generated in the debt table. If the payment is 
             * "Payment in installments", several records will be generated with
             * the data of the installment in the table of installments
             */
            
            if (opcion.equals("Pago Unico")) {
                try {

                    con = getConection();

                    PS = con.prepareStatement("INSERT INTO deuda (CodigoBus, CodServicio, ImporteAde, ImporteMin, ImporteCom, DocCondominio, Status) VALUES (?,?,?,?,?,?,?)");
                    PS.setString(1, CodigoBus);
                    PS.setInt(2, Servi);
                    PS.setFloat(3, Valor);
                    PS.setString(4, "0.00");
                    PS.setString(5, "0.00");
                    PS.setString(6, txtDoc.getText());
                    PS.setString(7, "Pendiente");
                    int RS = PS.executeUpdate();

                    con.close();

                    LimpiarCajas();

                } catch (SQLException e) {
                    System.out.println("Error al visualizar los datos: " + e.getMessage());
                }
            }
            if (opcion.equals("Pago a Cuotas")) {

                String Cuotas = txtCuotas.getText();
                int Cuota = Integer.parseInt(Cuotas);
                Float ValorCuotas = (Valor) / (Cuota);

                try {
                    con = getConection();
                    int e;
                    //Get the current date
                    LocalDate fecha = LocalDate.now();
                    
                    for (e = 0; e < Cuota; e++) {
                        // Get the current month
                        Month mes = (LocalDate.now().plusMonths(e + 1).getMonth());
                        // Get the name of the month
                        String nombre = mes.getDisplayName(TextStyle.FULL, new Locale("es", "ES"));
                        PS = con.prepareStatement("INSERT INTO cuota (NumCuota, DetalleCuota, FechaVenc, ImporteCuo, ImporteCom, CodigoBus, CodServicio, Status, DocCondominio) VALUES (?,?,?,?,?,?,?,?,?)");
                        PS.setInt(1, e);
                        PS.setString(2, "Cuota del mes de " + nombre);
                        PS.setDate(3, Date.valueOf(fecha.plusMonths(e + 1)));
                        PS.setFloat(4, ValorCuotas);
                        PS.setString(5, "0.00");
                        PS.setString(6, CodigoBus);
                        PS.setInt(7, Servi);
                        PS.setString(8, "Pendiente");
                        PS.setString(9, txtDoc.getText());
                        int RS = PS.executeUpdate();
                    }
                    con.close();
                    LimpiarCajas();
                } catch (SQLException e) {
                    System.out.println("Error al visualizar los datos: " + e.getMessage());
                }
            }

        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtCuotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCuotasActionPerformed

    }//GEN-LAST:event_txtCuotasActionPerformed

    private void txtFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFormActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFormActionPerformed

    private void txtFormMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtFormMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFormMouseClicked
        /**
         * Method to leave invisible the fields that are not necessary to see in some
         * occasions, for example if it is a single payment, do not show neither the
         * text nor the quota field
         */
    private void Deshabilitar() {
        txtForm.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                String opcion = (String) txtForm.getSelectedItem();
                if (opcion.equals("Pago Unico")) {
                    numCuotas.setVisible(false);
                    txtCuotas.setVisible(false);
                }
                if (opcion.equals("Pago a Cuotas")) {
                    numCuotas.setVisible(true);
                    txtCuotas.setVisible(true);
                }
            }
        });

    }

    /**
     * Code used to establish the connection with the database
     * @return the connection established
     */
    public static Connection getConection() {

        Connection con = null;

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(URL, SQL_USERNAME, SQL_PASSWORD);
        } catch (ClassNotFoundException | SQLException e) {
            System.err.println("Error: " + e);
        }
        return con;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DatosOrdenDePago.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DatosOrdenDePago.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DatosOrdenDePago.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DatosOrdenDePago.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DatosOrdenDePago().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelFont;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel numCuotas;
    private javax.swing.JTextField txtCuotas;
    private javax.swing.JTextField txtDoc;
    private javax.swing.JComboBox<String> txtForm;
    private javax.swing.JTextField txtNom;
    private javax.swing.JTextField txtNum;
    private javax.swing.JComboBox<String> txtServ;
    private javax.swing.JTextField txtVal;
    // End of variables declaration//GEN-END:variables
}
