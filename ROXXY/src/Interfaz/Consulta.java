/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaz;
import Atxy2k.CustomTextField.RestrictedTextField;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import static java.lang.String.valueOf;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 * Module whose function is to find the debt of the condominium and 
 * carry out the payment process of the same
 * 
 * @since 1.0.0
 * @author David Rivas
 */
public class Consulta extends javax.swing.JFrame {

    /**
     *The URL of the server you want to access is saved
     */
    public static final String URL = "jdbc:mysql://localhost:3306/troxxy";

    /**
     *The username is saved in the database
     */
    public static final String SQL_USERNAME = "root";

    /**
     *The database password is saved
     */
    public static final String SQL_PASSWORD = "";
    
    /**
     * Variables are prepared to reduce the code to write
     */
    PreparedStatement PS = null;
    ResultSet RS = null;
   
    /**
     *Methods and variables necessary for the operation of the code were placed
     */
    public Consulta() {
        initComponents();
        this.setLocationRelativeTo(null);
        obtenerFechaYHoraActual();
        LimpiarCajas();
        ValidacionDeCampos();
        txtPedido.setFocusable(true);
       
    }
    
    /**
     *Code whose purpose is to restrict and validate the input fields
     */
    public void ValidacionDeCampos(){
        /*Text field validation for Search Code*/
        RestrictedTextField a = new RestrictedTextField(txtPedido);
        a.setLimit(14);
        
        /*Text field validation for Place of payment*/
        RestrictedTextField b = new RestrictedTextField(txtLugar);
        b.setLimit(14);
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtPedido = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNom = new javax.swing.JLabel();
        txtDoc = new javax.swing.JLabel();
        ImpAde = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        ImpMin = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaDeuda = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        BtnPagar = new javax.swing.JButton();
        txtTotal = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtLugar = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtMora = new javax.swing.JLabel();
        jLabelFont = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setBackground(new java.awt.Color(204, 204, 255));
        jButton1.setText("Exit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 10, -1, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setForeground(new java.awt.Color(204, 204, 255));

        jLabel1.setText("NÃºmero de pedido:");

        txtPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPedidoActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(204, 204, 255));
        jButton2.setText("Consultar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(153, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(txtPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(160, 160, 160))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(141, 141, 141))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(192, 192, 192)
                .addComponent(jButton2)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 41, 470, 110));

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setForeground(new java.awt.Color(204, 204, 255));

        jLabel2.setText("Nombre cliente:");

        jLabel3.setText("Documento:");

        jLabel5.setText("Importe Adeudado:");

        jLabel6.setText("Importe Minimo:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtNom, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(txtDoc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ImpAde, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ImpMin, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtNom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ImpAde, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ImpMin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtDoc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 170, 470, 70));

        TablaDeuda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N.Cuota", "DetalleCuota", "FechaVenc", "ImporteCuo", "ImporteCom"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TablaDeuda);
        if (TablaDeuda.getColumnModel().getColumnCount() > 0) {
            TablaDeuda.getColumnModel().getColumn(0).setPreferredWidth(10);
            TablaDeuda.getColumnModel().getColumn(1).setPreferredWidth(110);
            TablaDeuda.getColumnModel().getColumn(2).setMinWidth(20);
            TablaDeuda.getColumnModel().getColumn(2).setPreferredWidth(20);
            TablaDeuda.getColumnModel().getColumn(3).setMinWidth(20);
            TablaDeuda.getColumnModel().getColumn(3).setPreferredWidth(20);
            TablaDeuda.getColumnModel().getColumn(4).setMinWidth(20);
            TablaDeuda.getColumnModel().getColumn(4).setPreferredWidth(20);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 260, 490, 200));

        jButton3.setText("Realizar devolucion");
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 550, -1, -1));

        BtnPagar.setText("Realizar pago");
        BtnPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnPagarActionPerformed(evt);
            }
        });
        getContentPane().add(BtnPagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 550, -1, -1));

        txtTotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtTotal.setText("0.00");
        getContentPane().add(txtTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 500, 70, 30));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Total:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 500, -1, 30));

        jLabel7.setText("Lugar De Pago:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 470, -1, 30));
        getContentPane().add(txtLugar, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 470, 120, 30));

        jLabel9.setText("Interes por mora:");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 470, -1, 20));

        txtMora.setText("0.00");
        getContentPane().add(txtMora, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 470, 60, 20));

        jLabelFont.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/gray.jpg"))); // NOI18N
        getContentPane().add(jLabelFont, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 570, 590));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPedidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPedidoActionPerformed

    /**
     * Code established to format the date for Years/months/days
     * @return retorna el formato establecido para la fecha
     */
    public static String obtenerFechaYHoraActual() {
            String formato = "yyyy-MM-dd";
            DateTimeFormatter formateador = DateTimeFormatter.ofPattern(formato);
            LocalDateTime ahora = LocalDateTime.now();
            return formateador.format(ahora);
    }
    
    /**
     *Button that activates the searches of the data referring to the debt
     *or fees of the condominium according to the unique associated code
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        Connection con = null;
        
        try {
            con = getConection();
            
            PS = con.prepareStatement("SELECT * FROM ordenpago WHERE CodigoBusqueda = ? and Status = 'Pendiente'");
            PS.setString(1, txtPedido.getText());
            RS = PS.executeQuery();
            
            if (txtPedido.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "El campo esta vacio");
            }
            if(RS.next()){
                txtNom.setText(RS.getString("NomCliente"));
                txtDoc.setText(RS.getString("Documento"));
                ImpAde.setText(RS.getString("ImpAde"));
                ImpMin.setText(RS.getString("ImpMin"));
            }else{
                JOptionPane.showMessageDialog(this, "ERROR: 301 \n CÃDIGO DE DEPOSITANTE NO EXISTE");
            }
            RS.close();
        } catch (SQLException e) {
            System.out.println("Error al visualizar los datos: "+e.getMessage());
        }
        
        
        
        /*----------------------------------------------------------------------------------------------------*/
        

/*End of condominium data inquiries*/

        /*----------------------------------------------------------------------------------------------------*/
        
/*Starts the table definition */        

        DefaultTableModel Model = new DefaultTableModel();
        int totalColumnas= TablaDeuda.getColumnCount();
            Model.addColumn("N.Cuota");
            Model.addColumn("DetalleCuota");
            Model.addColumn("FechaVenc");
            Model.addColumn("ImporteCuo");
            Model.addColumn("ImporteCom");
            
            TablaDeuda.setModel(Model);
            int [] anchos = {10,110,20,20,20};
            for(int x = 0; x<totalColumnas; x++){
            TablaDeuda.getColumnModel().getColumn(x).setPreferredWidth(anchos[x]);
            }
        
        Object[] fila = new Object[6];
        
        try {
            
            con = getConection();
            PS = con.prepareStatement("SELECT * FROM cuota WHERE CodigoBus = ? and Status = 'Pendiente'");
            PS.setString(1, txtPedido.getText());
            RS = PS.executeQuery();
            
            while(RS.next())
            {
            fila[0] = RS.getInt(10);
            fila[1] = RS.getString(2);
            fila[2] = RS.getDate(3);
            fila[3] = RS.getFloat(4);
            fila[4] = RS.getFloat(5);
            Model.addRow(fila);
            }
        
/*Start of adding columns to total*/
        LocalDate Fecha1;
        LocalDate Fecha2;
        
            int totalRow= TablaDeuda.getRowCount();
            double suma = 0.00;
            double total = 0.00;
            double importAude = Double.parseDouble(ImpAde.getText()) ;
            double mora = 0.00;
            for(int i=0;i<totalRow;i++)
            {
                 
                 suma= suma+Double.parseDouble(String.valueOf(TablaDeuda.getValueAt(i,3)));
                 Fecha1 = LocalDate.parse(valueOf(TablaDeuda.getValueAt(i,2)));
                 Fecha2 = LocalDate.now();
                 long days = ChronoUnit.DAYS.between(Fecha1, Fecha2);
                 if(days > 0 ){
                 double mult = Double.parseDouble(String.valueOf(TablaDeuda.getValueAt(i,3))) * 0.03;
                 double Div = mult / 30;
                 mora = Div * days;
                 }

            }   
            total = suma + importAude + mora;
                
                txtMora.setText("" + mora);
                txtTotal.setText(""+ total);
/*End of column sum to total*/
            
            RS.close();
            
           TablaDeuda.setModel(Model);
        } catch (SQLException e) {
           System.out.println("Error al visualizar los datos "+e.getMessage());
        }finally {
            PS = null;
            RS = null;
        }
/*End of table definition*/
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.exit(0);// Boton para cerrar la pestaÃ±a
    }//GEN-LAST:event_jButton1ActionPerformed
/**
 * Button that activates the entire payment process
 */
    private void BtnPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnPagarActionPerformed
        Connection con = null;
        /*Start of updating data regarding pay order*/
        try {
            con = getConection();
            
            PS = con.prepareStatement("UPDATE ordenpago SET Status = ? WHERE CodigoBusqueda = ?");
            PS.setString(1, "Validando");
            PS.setString(2, txtPedido.getText());
            int RES = PS.executeUpdate();
            
            
            con.close();
        } catch (SQLException e) {
            System.out.println("Error al visualizar los datos: "+e.getMessage());
        }
        
        try {
            con = getConection();
            
            PS = con.prepareStatement("UPDATE deuda SET Status = ? WHERE CodigoBusqueda = ?");
            PS.setString(1, "Validando");
            PS.setString(2, txtPedido.getText());
            int RES = PS.executeUpdate();
            
            con.close();
        } catch (SQLException e) {
            System.out.println("Error al visualizar los datos: "+e.getMessage());
        }
            /*End of data update regarding pay order*/
         /*Start of updating data regarding quotas*/
        try {
            con = getConection();
            
            PS = con.prepareStatement("UPDATE cuota SET Status = ? WHERE NumCuota = ?");
            
            int fila = TablaDeuda.getRowCount();
            int i;
            
            for (i = 0; i < fila; i++) {
            int valor = (int) TablaDeuda.getValueAt(i, 0);
            
            PS.setString(1, "Validando");
            PS.setInt(2, valor);
            int RS = PS.executeUpdate();
            }
            
            con.close();
        } catch (SQLException e) {
            System.out.println("Error al visualizar los datos: "+e.getMessage());
        }
        
        /*End of data update regarding quotas*/
        
         /*Start of data update regarding payment details*/
        try {
            con = getConection();
            
            PS = con.prepareStatement("INSERT INTO detallepago (NumCuota, ImporteCuota, DetalleCuota) VALUES (?,?,?)");
            
            int fila = TablaDeuda.getRowCount();
            int i;
            
            for (i = 0; i < fila; i++) {
            int valor1 = (int) TablaDeuda.getValueAt(i, 0);
            int valor2 = (int) (float) TablaDeuda.getValueAt(i, 3);
            String valor3 = (String) TablaDeuda.getValueAt(i, 1);
            PS.setInt(1, valor1);
            PS.setInt(2, valor2);
            PS.setInt(3, valor2);
            PS.setString(3, valor3);
            int RS = PS.executeUpdate();
            }
            
            con.close();
        } catch (SQLException e) {
            System.out.println("Error al visualizar los datos: "+e.getMessage());
        }
        /*End of data update regarding payment details*/
        
        
        
        /*Start data entry regarding the transaction*/
        try {
            con = getConection();
            
            PS = con.prepareStatement("INSERT INTO transaccion (fechaPago, MontoTotal, NombreFactura, NIT, LugarPago, CodigoBus, Status) VALUES (?,?,?,?,?,?,?)");
            PS.setString(1, obtenerFechaYHoraActual());
            PS.setString(2, txtTotal.getText());
            PS.setString(3, txtNom.getText());
            PS.setString(4, txtDoc.getText());
            PS.setString(5, txtLugar.getText());
            PS.setString(6, txtPedido.getText());
            PS.setString(7, "Validando");
            int RS = PS.executeUpdate();
            
            if (txtTotal.getText()=="0.00"){
                JOptionPane.showMessageDialog(this, "El campo esta vacio");
            }
            if(RS > 0){
                JOptionPane.showMessageDialog(this, "Pago Realizado correctamente");
                LimpiarCajas();
            }else{
                JOptionPane.showMessageDialog(this, "Error al realizar el pago");
                LimpiarCajas();
            }
            con.close();
        } catch (SQLException e) {
            System.out.println("Error al visualizar los datos: "+e.getMessage());
        }
        /*Final data entry regarding the transaction*/
       
    }//GEN-LAST:event_BtnPagarActionPerformed
    /**
     *Prepared method for clearing input fields
     */
    private void LimpiarCajas(){
    txtDoc.setText(null);
    txtNom.setText(null);
    txtPedido.setText(null);
    txtTotal.setText("0.00");
    txtMora.setText("0.00");
    ImpAde.setText(null);
    ImpMin.setText(null);
    
    }
    
   /**
     * Code used to establish the connection with the database
     * @return the connection established
     */
    public static Connection getConection() {
        
        Connection con = null;
        
        try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        con = DriverManager.getConnection(URL, SQL_USERNAME, SQL_PASSWORD);
        } catch (ClassNotFoundException | SQLException e){
            System.err.println("Error: "+e);
        }
        return con;
    }
   
    /**
     *
     * @param args
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Consulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Consulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Consulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Consulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Consulta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnPagar;
    private javax.swing.JLabel ImpAde;
    private javax.swing.JLabel ImpMin;
    private javax.swing.JTable TablaDeuda;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelFont;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel txtDoc;
    private javax.swing.JTextField txtLugar;
    private javax.swing.JLabel txtMora;
    private javax.swing.JLabel txtNom;
    private javax.swing.JTextField txtPedido;
    private javax.swing.JLabel txtTotal;
    // End of variables declaration//GEN-END:variables
}
